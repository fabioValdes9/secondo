Database : symtrajsmall
Restore  : No

Operator : distance
Number   : 1
Signature: T x T -> real,   where T in {(m)label(s), (m)place(s)}
Example  : query distance([const label value "Witsel"], [const label value "Witsel"])
Result   : 0.0

Operator : distancesym
Number   : 1
Signature: T x T x F -> real,   where T in {mlabel(s), mplace(s)}
Example  : query distancesym(Dotraj feed filter[.No=4] extract[Trajectory], Dotraj feed filter[.No=6] extract[Trajectory], "prefix")
Result   : 0.5

Operator : hybriddistance
Number   : 1
Signature: T x mpoint x T x mpoint -> real, where T in {mlabel, mplace}
Example  : query hybriddistance(mlabel1, berlin2wgs(Part feed extract[MP]), mlabel1, berlin2wgs(Part feed extract[MP]))
Result   : 0.0

Operator : gethybriddistanceparams
Number   : 1
Signature: -> stream(tuple(Name: string, InputType: string, Value: string))
Example  : query gethybriddistanceparams() count
Result   : 6

Operator : sethybriddistanceparam
Number   : 1
Signature: string x T -> bool,   where T depends on the parameter to be set
Example  : query sethybriddistanceparam("Threshold", 0.1909) 
Result   : TRUE

Operator : longestcommonsubsequence
Number   : 1
Signature: mT x mT -> stream(T),  T in {label, place}
Example  : query longestcommonsubsequence(Dotraj feed extract[Trajectory], Dotraj feed tail[9] extract[Trajectory]) count
Result   : 2

Operator : topattern
Number   : 1
Signature: text -> pattern
Example  : query mlabel1 matches ('(_ "Eving") * (_ "Innenstadt-Ost") +' topattern)
Result   : TRUE

Operator : toclassifier
Number   : 1
Signature: stream(tuple(description: text, pattern: text)) -> classifier
Example  : query classify(mlabel1, class3 feed toclassifier) count
Result   : 0

Operator : matches
Number   : 1
Signature: mlabel x text -> bool
Example  : query mlabel1 matches '(_ "Eving") * (_ "Innenstadt-Ost") +'
Result   : TRUE

Operator : tmatches
Number   : 1
Signature: tuple(X) x IDENT x (text | pattern) -> bool
Example  : query Dotraj feed filter[. tmatches [Trajectory, '(_ "Innenstadt-Ost") *']] count
Result   : 1

Operator : createtupleindex
Number   : 1
Signature: stream(tuple(X)) x IDENT -> tupleindex
Example  : query (Dotraj feed createtupleindex[Trajectory]) Dotraj indextmatches[Trajectory, '(_ "Innenstadt-Ost") *'] count
Result   : 1

Operator : bulkloadtupleindex
Number   : 1
Signature: rel(tuple(X)) x IDENT -> tupleindex
Example  : query Dotraj bulkloadtupleindex[Trajectory] Dotraj indextmatches[Trajectory, '(_ "Innenstadt-Ost") *'] count
Result   : 1

Operator : bulkloadtupleindex2
Number   : 1
Signature: rel(tuple(X)) -> tupleindex
Example  : query Dotraj bulkloadtupleindex2 Dotraj indextmatches2['(_ "Innenstadt-Ost")'] count
Result   : 8

Operator : indextmatches
Number   : 1
Signature: tupleindex x rel(tuple(X)) x IDENT x (text | pattern) -> stream(tuple(X))
Example  : query Dotraj bulkloadtupleindex[Trajectory] Dotraj indextmatches[Trajectory, '(_ "Innenstadt-Ost") *'] count
Result   : 1

Operator : indextmatches2
Number   : 1
Signature: tupleindex x rel(tuple(X)) x (text | pattern) -> stream(tuple(X))
Example  : query Dotraj bulkloadtupleindex2 Dotraj indextmatches2['(_ "Innenstadt-Ost")'] count
Result   : 8

Operator : indexrewrite
Number   : 1
Signature: tupleindex x rel(tuple(X)) x IDENT x (text | pattern) -> stream(Y)
Example  : query Dotraj bulkloadtupleindex[Trajectory] Dotraj indexrewrite[Trajectory, 'X (_ "Innenstadt-Ost") * => X'] count
Result   : 1

Operator : filtermatches
Number   : 1
Signature: stream(tuple(X)) x IDENT x text -> stream(tuple(X))
Example  : query Dotraj feed filtermatches[Trajectory, '(_ "Innenstadt-Ost") X * (_ _) // X.labels contains tolabel("Brackel")'] count
Result   : 1

Operator : createunitrtree
Number   : 1
Signature: stream(tuple(X)) x IDENT -> rtree
Example  : query Dotraj feed addid createunitrtree[Trajectory]
Result   : ((rtree1 (tuple ((No int) (Trajectory mlabel) (TID tid))) mlabel FALSE) ("R-Tree statistics" ("Height" 1) ("# of (leaf) entries" 100) ("# of nodes" 10) ("Bounding Box" (4381.0 4381.208333333333))))

Operator : rewrite
Number   : 0
Signature: mlabel x text -> stream(mlabel)
Example  : query rewrite(mlabel1, 'X * Y [(_ "Scharnhorst") | (_ "Brackel")]+ Z * => Y') count
Result   : 1
 
Operator : classify
Number   : 1
Signature: mlabel x classifier -> stream(text)
Example  : query classify(mlabel1, class3 feed toclassifier) count
Result   : 0

Operator : indexclassify
Number   : 1
Signature: rel(tuple(..., mlabel, ...)) x attrname x invfile x classifier -> stream(tuple(string, mlabel))
Example  : query Dotraj indexclassify [Trajectory, Dotraj createtrie[Trajectory], Dotraj feed addid createunitrtree[Trajectory], class3 feed toclassifier] count
Result   : 0

Operator : multirewrite
Number   : 1
Signature: stream(tuple(X)) x IDENT x stream(text) -> stream(mT), T in {mlabel(s), mplace(s)}
Example  : query Dotraj feed multirewrite[Trajectory, rewrite1 feed projecttransformstream[Pattern]] count
Result   : 3

Operator : createml
Number   : 1
Signature: int x bool -> mlabel
Example  : query createml(2, TRUE) matches '() ()'
Result   : TRUE

Operator : createmlrel
Number   : 1
Signature: int x int x string x bool -> bool
Example  : query createmlrel(10, 50, "Dotraj", TRUE)
Result   : FALSE

Operator : createtrie
Number   : 1
Signature: rel(tuple(..., mlabel, ...)) x attrname -> invfile
Example  : query Dotraj createtrie[Trajectory] wordCount["Innenstadt-Ost"]
Result   : 14

Operator  : getPatterns
Number    : 1
Signature : rel(tuple(X)) x ATTR x ATTR x real x int x int -> stream(tuple(Pattern: text, Support: real))
Example   : query Dotraj feed extend[X: [const mpoint value undef]] consume getPatterns[Trajectory, X, 0.5, 1, 5] count
Result    : 8

Operator  : createfptree
Number    : 1
Signature : rel(tuple(X)) x ATTR x ATTR x real -> fptree
Example   : query Dotraj feed extend[X: [const mpoint value undef]] consume createfptree[Trajectory, X, 0.5] getTypeNL
Result    : 'fptree'

Operator  : minefptree
Number    : 1
Signature : fptree x int x int -> stream(tuple(Pattern: text, Support: real))
Example   : query Dotraj feed extend[X: [const mpoint value undef]] consume createfptree[Trajectory, X, 0.5] minefptree[1, 5] count
Result    : 8

Operator  : createprojecteddb
Number    : 1
Signature : rel(tuple(X)) x ATTR x ATTR x real -> projecteddb
Example   : query Dotraj feed extend[X: [const mpoint value undef]] consume createprojecteddb[Trajectory, X, 0.5] getTypeNL
Result    : 'projecteddb'

Operator  : prefixSpan
Number    : 1
Signature : projecteddb x ATTR x ATTR x real x int x int -> stream(tuple(Pattern: text, Support: real))
Example   : query Dotraj feed extend[X: [const mpoint value undef]] consume createprojecteddb[Trajectory, X, 0.5] prefixSpan[1, 5] count
Result    : 8

Operator  : createverticaldb
Number    : 1
Signature : rel(tuple(X)) x ATTR x ATTR x real -> verticaldb
Example   : query Dotraj feed extend[X: [const mpoint value undef]] consume createverticaldb[Trajectory, X, 0.5] getTypeNL
Result    : 'verticaldb'

Operator  : spade
Number    : 1
Signature : rel(tuple(X)) x ATTR x ATTR x real x int x int -> stream(tuple(Pattern: text, Support: real))
Example   : query Dotraj feed extend[X: [const mpoint value undef]] consume createverticaldb[Trajectory, X, 0.5] spade[1, 5] count
Result    : 8

Operator  : getlabels
Number    : 1
Signature : mT -> stream(text), where T in {label(s), place(s)}
Example   : query getlabels(Dotraj feed extract[Trajectory]) count
Result    : 10

Operator  : createlexicon
Number    : 1
Signature : stream(tuple(X)) x ATTR -> invfile
Example   : query Dotraj feed createlexicon[Trajectory] searchWord['Innenstadt-Ost'] extract[WordPos]
Result    : 8

Operator  : frequencyvector
Number    : 1
Signature : mT x invfile (x bool) -> vector(real), where T in {label(s), place(s)}
Example   : query size(frequencyvector(Dotraj feed extract[Trajectory], Dotraj feed createlexicon[Trajectory]))
Result    : 12

Operator  : cosinesim
Number    : 1
Signature : vector(double) x vector(real) -> real
Example   : query cosinesim(create_vector(0.0, 1.0, 1.0), create_vector(1.0, 1.0, 0.0))
Result    : 0.5

Operator  : jaccardsim
Number    : 1
Signature : (vector(real) x vector(real)) | (mlabel x mlabel) -> real
Example   : query jaccardsim(create_vector(0.0, 1.0, 1.0, 1.0), create_vector(1.0, 1.0, 1.0, 0.0))
Result    : 0.5

Operator  : createsplsemtraj
Number    : 1
Signature : mpoint x mlabel -> splsemtraj
Example   : query isdefined(createsplsemtraj([const mpoint value ((("2012-01-01" "2012-01-01-00:30" TRUE FALSE) (7.0 51.0 7.1 51.1)))], Dotraj feed extract[Trajectory]))
Result    : TRUE

Operator  : splitter
Number    : 1
Signature : stream(tuple(X)) x ATTR x real x duration x real [x geoid] -> stream(splsemtraj)
Example   : query Dotraj feed extend[SST: createsplsemtraj([const mpoint value ((("2012-01-01" "2012-01-01-00:30" TRUE FALSE) (7.0 51.0 7.1 51.1)))], .Trajectory)] splitter[SST, 0.5, create_duration(0, 7200000), 1000.0] count
Result    : 0
